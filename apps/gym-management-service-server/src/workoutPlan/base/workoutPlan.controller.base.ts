/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkoutPlanService } from "../workoutPlan.service";
import { WorkoutPlanCreateInput } from "./WorkoutPlanCreateInput";
import { WorkoutPlan } from "./WorkoutPlan";
import { WorkoutPlanFindManyArgs } from "./WorkoutPlanFindManyArgs";
import { WorkoutPlanWhereUniqueInput } from "./WorkoutPlanWhereUniqueInput";
import { WorkoutPlanUpdateInput } from "./WorkoutPlanUpdateInput";

export class WorkoutPlanControllerBase {
  constructor(protected readonly service: WorkoutPlanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkoutPlan })
  async createWorkoutPlan(
    @common.Body() data: WorkoutPlanCreateInput
  ): Promise<WorkoutPlan> {
    return await this.service.createWorkoutPlan({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        durationWeeks: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkoutPlan] })
  @ApiNestedQuery(WorkoutPlanFindManyArgs)
  async workoutPlans(@common.Req() request: Request): Promise<WorkoutPlan[]> {
    const args = plainToClass(WorkoutPlanFindManyArgs, request.query);
    return this.service.workoutPlans({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        durationWeeks: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkoutPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workoutPlan(
    @common.Param() params: WorkoutPlanWhereUniqueInput
  ): Promise<WorkoutPlan | null> {
    const result = await this.service.workoutPlan({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        durationWeeks: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkoutPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkoutPlan(
    @common.Param() params: WorkoutPlanWhereUniqueInput,
    @common.Body() data: WorkoutPlanUpdateInput
  ): Promise<WorkoutPlan | null> {
    try {
      return await this.service.updateWorkoutPlan({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          durationWeeks: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkoutPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkoutPlan(
    @common.Param() params: WorkoutPlanWhereUniqueInput
  ): Promise<WorkoutPlan | null> {
    try {
      return await this.service.deleteWorkoutPlan({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          durationWeeks: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
