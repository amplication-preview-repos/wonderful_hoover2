/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WorkoutPlan } from "./WorkoutPlan";
import { WorkoutPlanCountArgs } from "./WorkoutPlanCountArgs";
import { WorkoutPlanFindManyArgs } from "./WorkoutPlanFindManyArgs";
import { WorkoutPlanFindUniqueArgs } from "./WorkoutPlanFindUniqueArgs";
import { CreateWorkoutPlanArgs } from "./CreateWorkoutPlanArgs";
import { UpdateWorkoutPlanArgs } from "./UpdateWorkoutPlanArgs";
import { DeleteWorkoutPlanArgs } from "./DeleteWorkoutPlanArgs";
import { WorkoutPlanService } from "../workoutPlan.service";
@graphql.Resolver(() => WorkoutPlan)
export class WorkoutPlanResolverBase {
  constructor(protected readonly service: WorkoutPlanService) {}

  async _workoutPlansMeta(
    @graphql.Args() args: WorkoutPlanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WorkoutPlan])
  async workoutPlans(
    @graphql.Args() args: WorkoutPlanFindManyArgs
  ): Promise<WorkoutPlan[]> {
    return this.service.workoutPlans(args);
  }

  @graphql.Query(() => WorkoutPlan, { nullable: true })
  async workoutPlan(
    @graphql.Args() args: WorkoutPlanFindUniqueArgs
  ): Promise<WorkoutPlan | null> {
    const result = await this.service.workoutPlan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WorkoutPlan)
  async createWorkoutPlan(
    @graphql.Args() args: CreateWorkoutPlanArgs
  ): Promise<WorkoutPlan> {
    return await this.service.createWorkoutPlan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WorkoutPlan)
  async updateWorkoutPlan(
    @graphql.Args() args: UpdateWorkoutPlanArgs
  ): Promise<WorkoutPlan | null> {
    try {
      return await this.service.updateWorkoutPlan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkoutPlan)
  async deleteWorkoutPlan(
    @graphql.Args() args: DeleteWorkoutPlanArgs
  ): Promise<WorkoutPlan | null> {
    try {
      return await this.service.deleteWorkoutPlan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
