/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MemberService } from "../member.service";
import { MemberCreateInput } from "./MemberCreateInput";
import { Member } from "./Member";
import { MemberFindManyArgs } from "./MemberFindManyArgs";
import { MemberWhereUniqueInput } from "./MemberWhereUniqueInput";
import { MemberUpdateInput } from "./MemberUpdateInput";
import { FoodPreferenceFindManyArgs } from "../../foodPreference/base/FoodPreferenceFindManyArgs";
import { FoodPreference } from "../../foodPreference/base/FoodPreference";
import { FoodPreferenceWhereUniqueInput } from "../../foodPreference/base/FoodPreferenceWhereUniqueInput";

export class MemberControllerBase {
  constructor(protected readonly service: MemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Member })
  async createMember(@common.Body() data: MemberCreateInput): Promise<Member> {
    return await this.service.createMember({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        dateOfBirth: true,
        membershipStartDate: true,
        membershipEndDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Member] })
  @ApiNestedQuery(MemberFindManyArgs)
  async members(@common.Req() request: Request): Promise<Member[]> {
    const args = plainToClass(MemberFindManyArgs, request.query);
    return this.service.members({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        dateOfBirth: true,
        membershipStartDate: true,
        membershipEndDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Member })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async member(
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<Member | null> {
    const result = await this.service.member({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        dateOfBirth: true,
        membershipStartDate: true,
        membershipEndDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Member })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMember(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() data: MemberUpdateInput
  ): Promise<Member | null> {
    try {
      return await this.service.updateMember({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          dateOfBirth: true,
          membershipStartDate: true,
          membershipEndDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Member })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMember(
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<Member | null> {
    try {
      return await this.service.deleteMember({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          dateOfBirth: true,
          membershipStartDate: true,
          membershipEndDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/foodPreferences")
  @ApiNestedQuery(FoodPreferenceFindManyArgs)
  async findFoodPreferences(
    @common.Req() request: Request,
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<FoodPreference[]> {
    const query = plainToClass(FoodPreferenceFindManyArgs, request.query);
    const results = await this.service.findFoodPreferences(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        preference: true,

        member: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/foodPreferences")
  async connectFoodPreferences(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: FoodPreferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      foodPreferences: {
        connect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/foodPreferences")
  async updateFoodPreferences(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: FoodPreferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      foodPreferences: {
        set: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/foodPreferences")
  async disconnectFoodPreferences(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: FoodPreferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      foodPreferences: {
        disconnect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }
}
