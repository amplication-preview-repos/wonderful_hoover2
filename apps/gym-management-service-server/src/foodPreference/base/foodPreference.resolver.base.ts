/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FoodPreference } from "./FoodPreference";
import { FoodPreferenceCountArgs } from "./FoodPreferenceCountArgs";
import { FoodPreferenceFindManyArgs } from "./FoodPreferenceFindManyArgs";
import { FoodPreferenceFindUniqueArgs } from "./FoodPreferenceFindUniqueArgs";
import { CreateFoodPreferenceArgs } from "./CreateFoodPreferenceArgs";
import { UpdateFoodPreferenceArgs } from "./UpdateFoodPreferenceArgs";
import { DeleteFoodPreferenceArgs } from "./DeleteFoodPreferenceArgs";
import { Member } from "../../member/base/Member";
import { FoodPreferenceService } from "../foodPreference.service";
@graphql.Resolver(() => FoodPreference)
export class FoodPreferenceResolverBase {
  constructor(protected readonly service: FoodPreferenceService) {}

  async _foodPreferencesMeta(
    @graphql.Args() args: FoodPreferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FoodPreference])
  async foodPreferences(
    @graphql.Args() args: FoodPreferenceFindManyArgs
  ): Promise<FoodPreference[]> {
    return this.service.foodPreferences(args);
  }

  @graphql.Query(() => FoodPreference, { nullable: true })
  async foodPreference(
    @graphql.Args() args: FoodPreferenceFindUniqueArgs
  ): Promise<FoodPreference | null> {
    const result = await this.service.foodPreference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FoodPreference)
  async createFoodPreference(
    @graphql.Args() args: CreateFoodPreferenceArgs
  ): Promise<FoodPreference> {
    return await this.service.createFoodPreference({
      ...args,
      data: {
        ...args.data,

        member: args.data.member
          ? {
              connect: args.data.member,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FoodPreference)
  async updateFoodPreference(
    @graphql.Args() args: UpdateFoodPreferenceArgs
  ): Promise<FoodPreference | null> {
    try {
      return await this.service.updateFoodPreference({
        ...args,
        data: {
          ...args.data,

          member: args.data.member
            ? {
                connect: args.data.member,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FoodPreference)
  async deleteFoodPreference(
    @graphql.Args() args: DeleteFoodPreferenceArgs
  ): Promise<FoodPreference | null> {
    try {
      return await this.service.deleteFoodPreference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Member, {
    nullable: true,
    name: "member",
  })
  async getMember(
    @graphql.Parent() parent: FoodPreference
  ): Promise<Member | null> {
    const result = await this.service.getMember(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
