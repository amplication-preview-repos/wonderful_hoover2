/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FoodPreference as PrismaFoodPreference,
  Member as PrismaMember,
} from "@prisma/client";

export class FoodPreferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FoodPreferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.foodPreference.count(args);
  }

  async foodPreferences(
    args: Prisma.FoodPreferenceFindManyArgs
  ): Promise<PrismaFoodPreference[]> {
    return this.prisma.foodPreference.findMany(args);
  }
  async foodPreference(
    args: Prisma.FoodPreferenceFindUniqueArgs
  ): Promise<PrismaFoodPreference | null> {
    return this.prisma.foodPreference.findUnique(args);
  }
  async createFoodPreference(
    args: Prisma.FoodPreferenceCreateArgs
  ): Promise<PrismaFoodPreference> {
    return this.prisma.foodPreference.create(args);
  }
  async updateFoodPreference(
    args: Prisma.FoodPreferenceUpdateArgs
  ): Promise<PrismaFoodPreference> {
    return this.prisma.foodPreference.update(args);
  }
  async deleteFoodPreference(
    args: Prisma.FoodPreferenceDeleteArgs
  ): Promise<PrismaFoodPreference> {
    return this.prisma.foodPreference.delete(args);
  }

  async getMember(parentId: string): Promise<PrismaMember | null> {
    return this.prisma.foodPreference
      .findUnique({
        where: { id: parentId },
      })
      .member();
  }
}
