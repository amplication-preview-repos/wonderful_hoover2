/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FoodPreferenceService } from "../foodPreference.service";
import { FoodPreferenceCreateInput } from "./FoodPreferenceCreateInput";
import { FoodPreference } from "./FoodPreference";
import { FoodPreferenceFindManyArgs } from "./FoodPreferenceFindManyArgs";
import { FoodPreferenceWhereUniqueInput } from "./FoodPreferenceWhereUniqueInput";
import { FoodPreferenceUpdateInput } from "./FoodPreferenceUpdateInput";

export class FoodPreferenceControllerBase {
  constructor(protected readonly service: FoodPreferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FoodPreference })
  async createFoodPreference(
    @common.Body() data: FoodPreferenceCreateInput
  ): Promise<FoodPreference> {
    return await this.service.createFoodPreference({
      data: {
        ...data,

        member: data.member
          ? {
              connect: data.member,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        preference: true,

        member: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FoodPreference] })
  @ApiNestedQuery(FoodPreferenceFindManyArgs)
  async foodPreferences(
    @common.Req() request: Request
  ): Promise<FoodPreference[]> {
    const args = plainToClass(FoodPreferenceFindManyArgs, request.query);
    return this.service.foodPreferences({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        preference: true,

        member: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FoodPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async foodPreference(
    @common.Param() params: FoodPreferenceWhereUniqueInput
  ): Promise<FoodPreference | null> {
    const result = await this.service.foodPreference({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        preference: true,

        member: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FoodPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFoodPreference(
    @common.Param() params: FoodPreferenceWhereUniqueInput,
    @common.Body() data: FoodPreferenceUpdateInput
  ): Promise<FoodPreference | null> {
    try {
      return await this.service.updateFoodPreference({
        where: params,
        data: {
          ...data,

          member: data.member
            ? {
                connect: data.member,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          preference: true,

          member: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FoodPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFoodPreference(
    @common.Param() params: FoodPreferenceWhereUniqueInput
  ): Promise<FoodPreference | null> {
    try {
      return await this.service.deleteFoodPreference({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          preference: true,

          member: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
